input= information put in 
output= information put out 


Print

print("Hello World")

print("Hello", end='')
print("World")
#prints Hello World as one line

print("Hi ", end='Rose')
print(", how are you?")
#prints: Hi Rose, how are you?, separated as /Hi /Rose/, how are you?

.py should be the file type for python 
python is an interpreted language

python shells can be used to run/ test your code

#This is a one-line comment

'''
This is a multiple line comment
The marks are single quotes
'''

Variables
variables can be named with letters and _, are case sensitive 

my_variable = "Hello World"
print(my_variable)

python does not use the var keyword

string_variable = "letters and symbols"
#strings always have quotes

boolean_variable = True
print(boolean_variable)
#booleans are either True or False (must be capitalized)

integer_variable = 50
#numbers without decimals, if you use comma it will register as a set of numbers

float_variable = 5.05
#numbers with decimals

my_variable="float",3,9.9,True
print(my_variable)
#all variables can be used alongside eachother so long as the function allows it

Arithmetic Operators

a *= 2
a /= 2
a //=2
a += 2
a -= 2
a **=2
a %= 2



a=3
print(type(a))
a=str(a)
print(type(a))
print(a)

b="3"
print(a+ int(b))

strings can be added too, just like ints and floats
int+float=float 

a = 10
b = True
c = a - b
print(c)

output of 9 becuase true registers as 1 and false as 0

a = 25
b =5.1
print(a / b)
print(a//b)
floor division^
#always rounds down

a =2
b ="Hi "
print (a * b)
#print(ab) doesnt work

a =4**2
print(a) 
#dont exponent a negative number
square_root =25**.5
print(square_root) 

PEMDAS

modulo = 5 % 2
print(modulo)

whole = 63
divider = 5
division = 63//5
remainder = 63 % 5
print(division)
print(remainder)
#negative whole returns negative division, positive remainder
#negative divider returns both negative 


Boolean Operators

a = True
b = 1
print(a == b) 

a = 5
b = 1
print(a != b)

a = 9
b = 17
print(a > b)

a = True
b = False
print(a > b)

a=True
b=True
c=False
d=False
print(a and b)
print(a and b and c)
print(a and b and a and b)
print(a or b)
print(a or c)
print(c or d)
print(a or c or d)

print(not True)

calculate bools in order of not, and, then or 

#Short Circuting- if Python knows something will be true before finishing, it wont finish 

>>> print("hi"bob")
  File "<stdin>", line 1
    print("hi"bob")
                 ^
SyntaxError: unterminated string literal (detected at line 1)
>>> print("hi\"bob")
hi"bob
>>>
The \ will cancel the 1st ", its an escape

>>> print("hi\bob")
hob
>>>HAHAHA

anyways 
use use end=' ' for any special characters

teacher_name = "xi chen"

Use Type Cast to change type of variable 

# Converts a string to an integer
var1 = int("123")
var2 = 100
print(var1 + var2) 

>>> first_name =bool(first_name)
>>> print(first_name)
True
>>>

Input function
>>> first = input("first name")
first nameRose
>>> print(first)
Rose
>>>
#defaults to string 

>>> numone =input()
6
>>> numtwo = input()
3
>>> numone + numtwo
'63'
>>> numone = int(numone)
>>> numtwo = int(numtwo)
>>> numone + numtwo
9
>>>#typecasting, ie 2

cs + string("1400")

Design:Yondu Udonta

Strings 

my_string = "Hello"
length = len(my_string)
print(length)
#returns 5

character = my_string[1]
print(character)
#string index/ referencing a character

my_string = "Hello!"
character = my_string[len(my_string)-1]
character = my_string[-1] 
print(character)
#you gotta do -1 because character length starts at 1 but character index starts at 0
#negative numbers count from the end, positive characters count from the front

Index Error- you're trying to access something that does not exist

Strings are immutable- you don't change just part of it you gotta assign the whole thing anew

my_string = "Hello world! This is a very, very long string. \
Even though this string is on three different lines, it should \
print as one line. Notice how the line breaks are different."
print(my_string)

long_string = """Notice how this weird looking
    string is being
        printed.
      WAPPPPP
    WAAAPPPPP
  WAAAAAAAAAA"""
  #also works with single quotes
print(long_string)

in Operator

my_string = "The brown dog jumps over the lazy fox."
print("dog" in my_string)
print(my_string in my_string)
#return True

slice Operator- includes the first number, excludes the second number 

my_string = "The brown dog jumps over the lazy fox."
my_slice = my_string[4:9] #brown 
#slice length will always equal the difference between the parameters
my_slice = my_string[1:1] #nothing
print(my_slice)
print(my_string[0:len(my_string)]) #everything
my_slice(0:3:2) 
#the 2 means step 2- use every other character within the parameters 

they count starting at 0

Escape characters

my_string = "Hello\nworld"
print(my_string)
#Hello, new line, World 

Enter in string \n 
Tab in string \t 

my_string = "And then she said, \"Hi there.\""
print(my_string)

\\	Prints a backslash                         	print("\\")
\â€™	Prints a single quote                    	print("\'")
\"	Prints a double quote                   	print("\"")
\t	Prints a tab (spacing)                   	print("Hello\tworld")
\uxxxx	Prints a hexidecimal unicode character	print("\u26BE")

Formatting Strings /Interpolating Strings 

arms = 2
fingers = 10
print("I have " + str(arms) + " arms and " + str(fingers) + " fingers.")


.format 
var1 = "Dream"
var2 = "Sing"
print("{} on, {} on, {} for the love and {} for the fear".format(var1,var1,var2,var2))

print("{2} on, {2} on, {0} for the love and {0} for the fear".format(var1,var1,var2,var2))

the index for the .format starts at 0

f string / f-string

var1 = 7
var2 = "away"
my_string = f"{var1} up and {var2}."
print(my_string)

this way automatically typecasts into string 

name = "Rose"
occupation = "farmer"
sentence = f"My name is {name}. "\
            f"I am a {occupation}."
print(sentence)

var1 = "Up"
var2 = "away"
print("%s, up and %s" % (var1, var2))

this way uses % to interpolate and s to type cast. it also works with i, f, but not b
its the old way dont use it 

select a chunk of code and do Ctrl # to comment it out- yet to test 

snake casing is all lowercase letters and using _ as a space

syntax is the rules for forming legal statements
semantics is the meaning associated with the statement 

we can use f"string{var}" to insert anything into a string- most importantly a function/return value
 

number = 6.329874
print(f"number is {number: .2f}")
(prints the number with 2 decimal places)
# number is 6.32

PEP 8 recommends that you should limit all lines to >= 79 characters
DocString

if statement

if True:
    print("Execute if expression is True")

print("Continue execute here)

#four spaces = 1 indentation 
#new indentation for every block of code 
#even if you have an error, python will run the code up until the error

checking if something is even:
num = 1
if num % 2 == 0:
    print(f"{num} is even.")

#if num % 2 == 1:
#    print(f"{num} is odd")

else: 
    pass 

#else if 
elif num1 <= 0:
    print("negative")

if parameter one:
    action
elif parameter two: 
    action
else: (otherwise)
    action or pass 

Python will only run 1 if statement, if it runs into a pass it will exit without doing anything

import turtle
turtle.setup(500, 500, 100, 0)

turtle.forward(100)
turtle.right(180)
turtle.forward(50)

turtle.end_fill()
turtle.done()

#loops

for i in range(10):
    print(i)

for i in range(2,6) (four numbers: 2,3,4,5)
    print(i)

for i in range(1,5,2) (1,3)
    print(i)

total = 0
incremental = 0 
for i in range(6):
    total += i
    incremental += 1

print(total)
print(incremental)

p_color = (0/255, 153/255, 204/255)

for i in range (6)
    turtle.forward(100)
    turtle.right(360/6)

turtle.end_fill()
turtle.done()

turtle.goto(20,20)
turtle.penup()
turtle.pendown()

turtle.pencolor(p_color)

use html color picker

making functions

def greet_twice():
    print("Hello")
    print("Hello")

greet_twice()

arguments: the input

def draw_rect(f_color)
    turtle.fillcolor(f_color)

draw_rect("blue")
(input goes in the parentheses)


turtle.setup(1000, 500)

p_color = (0/255, 153/255, 204/255)
turtle.pencolor(p_color)
turtle.fillcolor(p_color)

for i in range(6)
    turtle.forward(100)
    turtle.right(360/4)
turtle.end_fill

turtle.done

for i in range(5):
    print("Hello")

for i in range(5):
    print("Loop #" + str(i))


for i in range(10,0,-1):
    print("Loop #" + str(i)) 

loops
turtles

import turtle

t = turtle.Turtle()


# All of your turtle commands
# go in this space here.



t.forward(n)
t.backward()
t.rt(d)
t.lt(d)

turtle.mainloop() #ends turtle 

 for i in range(360):
...     t.forward(1)
...     t.rt(1)
...
>>> for i in range(360):
...     t.forward(.5)
...     t.rt(1)
...
>>> for i in range(180):
...     t.forward(1)
...     t.rt(2)
...
>>> 115 takes us to the top of the base circle


 def shortside():
  File "<stdin>", line 5
    def shortside():
    ^^^
SyntaxError: invalid syntax
>>>
>>> def shortside():
...     for i in range(90):
...             t.forward(1/squish_factor)
...             t.rt(1)
...
>>> longside()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'longside' is not defined
>>> shortside()
>>>
>>> shortside()
>>> shortside()
>>> shortside()
>>> def longside():
...     for i in range(90):
...             t.forward(squish_factor)
...             t.rt(1)
...
>>> t.lt(90)
>>> shortside()
>>> longside()
>>> shortside()
>>> longside()
>>>

def use_a_swear():
  """Says a swear"""
  print("bitch")

help(use_a_swear)

count = 0 # counting variable
while count < 5:
    print("Hello")
    count = count + 1


import random
 
while True:
    print("This is an infinite loop")
    rand_num = random.randint(1, 101) # random integer between 1 and 100
    if rand_num > 75:
        print("The loop has ended")
        break # stop the loop



import turtle
import random
def draw_rect(f_color, length):
    p_color = (0/255, 153/255, 204/255)
    turtle.pencolor(p_color)
    turtle.fillcolor(f_color)
    turtle.begin_fill()
    for i in range(4):
        turtle.forward(length)
        turtle.right(360/4)
    turtle.end_fill()
def move_toxy(x, y):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
def main():
    turtle.setup(1000, 500)
    turtle.bgcolor("gray")
    turtle.speed(0)
    # for i in range(5):
    #     x_val = random.randint(-400, 400)
    #     y_val = random.randint(-200, 200)
    #     move_toxy(x_val, y_val)
    #     fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255,
random.randint(0, 255) / 255)
    #     draw_rect(fill_color, random.randint(20, 100))
    i = 0
    while i<5:
        x_val = random.randint(-400, 400)
        y_val = random.randint(-200, 200)
        move_toxy(x_val, y_val)
        fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255, 
random.randint(0, 255) / 255)
        draw_rect(fill_color, random.randint(20, 100))
        i = i + 1
    # draw_rect("blue", 100)
    # move_toxy(-100, 150)
    # draw_rect("blue", 50)
    turtle.done()
if __name__ =="__main__":
    main()
    # turtle.circle(100, 180)
    # turtle.done()import turtle
import random
def draw_rect(f_color, length):
    p_color = (0/255, 153/255, 204/255)
    turtle.pencolor(p_color)
    turtle.fillcolor(f_color)
    turtle.begin_fill()
    for i in range(4):
        turtle.forward(length)
        turtle.right(360/4)
    turtle.end_fill()
def move_toxy(x, y):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
def main():
    turtle.setup(1000, 500)
    turtle.bgcolor("gray")
    turtle.speed(0)
    # for i in range(5):
    #     x_val = random.randint(-400, 400)
    #     y_val = random.randint(-200, 200)
    #     move_toxy(x_val, y_val)
    #     fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255,
random.randint(0, 255) / 255)
    #     draw_rect(fill_color, random.randint(20, 100))
    i = 0
    while i<5:
        x_val = random.randint(-400, 400)
        y_val = random.randint(-200, 200)
        move_toxy(x_val, y_val)
        fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255, 
random.randint(0, 255) / 255)
        draw_rect(fill_color, random.randint(20, 100))
        i = i + 1
    # draw_rect("blue", 100)
    # move_toxy(-100, 150)
    # draw_rect("blue", 50)
    turtle.done()
if __name__ =="__main__":
    main()
    # turtle.circle(100, 180)
    # turtle.done()










