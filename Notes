input= information put in 
output= information put out 


Print

print("Hello World")

print("Hello", end='')
print("World")
#prints Hello World as one line

print("Hi ", end='Rose')
print(", how are you?")
#prints: Hi Rose, how are you?, separated as /Hi /Rose/, how are you?

.py should be the file type for python 
python is an interpreted language

python shells can be used to run/ test your code

#This is a one-line comment

'''
This is a multiple line comment
The marks are single quotes
'''

Variables
variables can be named with letters and _, are case sensitive 

my_variable = "Hello World"
print(my_variable)

python does not use the var keyword

string_variable = "letters and symbols"
#strings always have quotes

boolean_variable = True
print(boolean_variable)
#booleans are either True or False (must be capitalized)

integer_variable = 50
#numbers without decimals, if you use comma it will register as a set of numbers

float_variable = 5.05
#numbers with decimals

my_variable="float",3,9.9,True
print(my_variable)
#all variables can be used alongside eachother so long as the function allows it

Arithmetic Operators

a *= 2
a /= 2
a //=2
a += 2
a -= 2
a **=2
a %= 2



a=3
print(type(a))
a=str(a)
print(type(a))
print(a)

b="3"
print(a+ int(b))

strings can be added too, just like ints and floats
int+float=float 

a = 10
b = True
c = a - b
print(c)

output of 9 becuase true registers as 1 and false as 0

a = 25
b =5.1
print(a / b)
print(a//b)
floor division^
#always rounds down

a =2
b ="Hi "
print (a * b)
#print(ab) doesnt work

a =4**2
print(a) 
#dont exponent a negative number
square_root =25**.5
print(square_root) 

PEMDAS

modulo = 5 % 2
print(modulo)

whole = 63
divider = 5
division = 63//5
remainder = 63 % 5
print(division)
print(remainder)
#negative whole returns negative division, positive remainder
#negative divider returns both negative 


Boolean Operators

a = True
b = 1
print(a == b) 

a = 5
b = 1
print(a != b)

a = 9
b = 17
print(a > b)

a = True
b = False
print(a > b)

a=True
b=True
c=False
d=False
print(a and b)
print(a and b and c)
print(a and b and a and b)
print(a or b)
print(a or c)
print(c or d)
print(a or c or d)

print(not True)

calculate bools in order of not, and, then or 

#Short Circuting- if Python knows something will be true before finishing, it wont finish 

>>> print("hi"bob")
  File "<stdin>", line 1
    print("hi"bob")
                 ^
SyntaxError: unterminated string literal (detected at line 1)
>>> print("hi\"bob")
hi"bob
>>>
The \ will cancel the 1st ", its an escape

>>> print("hi\bob")
hob
>>>HAHAHA

anyways 
use use end=' ' for any special characters

teacher_name = "xi chen"

Use Type Cast to change type of variable 

# Converts a string to an integer
var1 = int("123")
var2 = 100
print(var1 + var2) 

>>> first_name =bool(first_name)
>>> print(first_name)
True
>>>

Input function
>>> first = input("first name")
first nameRose
>>> print(first)
Rose
>>>
#defaults to string 

>>> numone =input()
6
>>> numtwo = input()
3
>>> numone + numtwo
'63'
>>> numone = int(numone)
>>> numtwo = int(numtwo)
>>> numone + numtwo
9
>>>#typecasting, ie 2

cs + string("1400")

Design:Yondu Udonta

Strings 

my_string = "Hello"
length = len(my_string)
print(length)
#returns 5

character = my_string[1]
print(character)
#string index/ referencing a character

my_string = "Hello!"
character = my_string[len(my_string)-1]
character = my_string[-1] 
print(character)
#you gotta do -1 because character length starts at 1 but character index starts at 0
#negative numbers count from the end, positive characters count from the front

Index Error- you're trying to access something that does not exist

Strings are immutable- you don't change just part of it you gotta assign the whole thing anew

my_string = "Hello world! This is a very, very long string. \
Even though this string is on three different lines, it should \
print as one line. Notice how the line breaks are different."
print(my_string)

long_string = """Notice how this weird looking
    string is being
        printed.
      WAPPPPP
    WAAAPPPPP
  WAAAAAAAAAA"""
  #also works with single quotes
print(long_string)

in Operator

my_string = "The brown dog jumps over the lazy fox."
print("dog" in my_string)
print(my_string in my_string)
#return True

slice Operator- includes the first number, excludes the second number 

my_string = "The brown dog jumps over the lazy fox."
my_slice = my_string[4:9] #brown 
#slice length will always equal the difference between the parameters
my_slice = my_string[1:1] #nothing
print(my_slice)
print(my_string[0:len(my_string)]) #everything
my_slice(0:3:2) 
#the 2 means step 2- use every other character within the parameters 

they count starting at 0

Escape characters

my_string = "Hello\nworld"
print(my_string)
#Hello, new line, World 

Enter in string \n 
Tab in string \t 

my_string = "And then she said, \"Hi there.\""
print(my_string)

\\	Prints a backslash                         	print("\\")
\â€™	Prints a single quote                    	print("\'")
\"	Prints a double quote                   	print("\"")
\t	Prints a tab (spacing)                   	print("Hello\tworld")
\uxxxx	Prints a hexidecimal unicode character	print("\u26BE")

Formatting Strings /Interpolating Strings /string interpolation

arms = 2
fingers = 10
print("I have " + str(arms) + " arms and " + str(fingers) + " fingers.")

print("The type of {} is {}".format(param1, type(param1)))
    print("The type of {} is {}".format(param2, type(param2)))
    print("The type of {} is {}".format(param3, type(param3)))
    print(f"The type of {} is {}"(param4, type(param4)))
     
for interpolating in a function


.format 
var1 = "Dream"
var2 = "Sing"
print("{} on, {} on, {} for the love and {} for the fear".format(var1,var1,var2,var2))

print("{2} on, {2} on, {0} for the love and {0} for the fear".format(var1,var1,var2,var2))

the index for the .format starts at 0

f string / f-string

var1 = 7
var2 = "away"
my_string = f"{var1} up and {var2}."
print(my_string)

this way automatically typecasts into string 

name = "Rose"
occupation = "farmer"
sentence = f"My name is {name}. "\
            f"I am a {occupation}."
print(sentence)

def print_parameter(pram, pram2, pram3):
  """ Prints parameters interpolated"""
  print("My first parameter is ", pram1)
  print("My 2nd parameter is {}".format(pram2))
  print(f"My 3rd parameter is {pram3}")

print_parameter("fuck","bitch","cunt")



var1 = "Up"
var2 = "away"
print("%s, up and %s" % (var1, var2))

this way uses % to interpolate and s to type cast. it also works with i, f, but not b
its the old way dont use it 

select a chunk of code and do Ctrl / to comment it out

snake casing is all lowercase letters and using _ as a space

syntax is the rules for forming legal statements
semantics is the meaning associated with the statement 

we can use f"string{var}" to insert anything into a string- most importantly a function/return value
 

number = 6.329874
print(f"number is {number: .2f}")
(prints the number with 2 decimal places)
# number is 6.32

PEP 8 recommends that you should limit all lines to >= 79 characters
DocString

if statement

if True:
    print("Execute if expression is True")

print("Continue execute here)

#four spaces = 1 indentation 
#new indentation for every block of code 
#even if you have an error, python will run the code up until the error

checking if something is even:
num = 1
if num % 2 == 0:
    print(f"{num} is even.")

#if num % 2 == 1:
#    print(f"{num} is odd")

else: 
    pass 

#else if 
elif num1 <= 0:
    print("negative")

if parameter one:
    action
elif parameter two: 
    action
else: (otherwise)
    action or pass 

Python will only run 1 if statement, if it runs into a pass it will exit without doing anything

import turtle
turtle.setup(500, 500, 100, 0)

turtle.forward(100)
turtle.right(180)
turtle.forward(50)

turtle.end_fill()
turtle.done()

#loops

for i in range(10):
    print(i)

for i in range(2,6) (four numbers: 2,3,4,5)
    print(i)

for i in range(1,5,2) (1,3)
    print(i)

total = 0
incremental = 0 
for i in range(6):
    total += i
    incremental += 1

print(total)
print(incremental)

p_color = (0/255, 153/255, 204/255)

for i in range (6)
    turtle.forward(100)
    turtle.right(360/6)

turtle.end_fill()
turtle.done()

turtle.goto(20,20)
turtle.penup()
turtle.pendown()

turtle.pencolor(p_color)

use html color picker

making functions

def greet_twice():
    print("Hello")
    print("Hello")

greet_twice()

arguments: the input

def draw_rect(f_color)
    turtle.fillcolor(f_color)

draw_rect("blue")
(input goes in the parentheses)


turtle.setup(1000, 500)

p_color = (0/255, 153/255, 204/255)
turtle.pencolor(p_color)
turtle.fillcolor(p_color)

for i in range(6)
    turtle.forward(100)
    turtle.right(360/4)
turtle.end_fill

turtle.done

for i in range(5):
    print("Hello")

for i in range(5):
    print("Loop #" + str(i))


for i in range(10,0,-1):
    print("Loop #" + str(i)) 

loops
turtles

import turtle

t = turtle.Turtle()


# All of your turtle commands
# go in this space here.



t.forward(n)
t.backward()
t.rt(d)
t.lt(d)

turtle.mainloop() #ends turtle 

 for i in range(360):
...     t.forward(1)
...     t.rt(1)
...
>>> for i in range(360):
...     t.forward(.5)
...     t.rt(1)
...
>>> for i in range(180):
...     t.forward(1)
...     t.rt(2)
...
>>> 115 takes us to the top of the base circle


 def shortside():
  File "<stdin>", line 5
    def shortside():
    ^^^
SyntaxError: invalid syntax
>>>
>>> def shortside():
...     for i in range(90):
...             t.forward(1/squish_factor)
...             t.rt(1)
...
>>> longside()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'longside' is not defined
>>> shortside()
>>>
>>> shortside()
>>> shortside()
>>> shortside()
>>> def longside():
...     for i in range(90):
...             t.forward(squish_factor)
...             t.rt(1)
...
>>> t.lt(90)
>>> shortside()
>>> longside()
>>> shortside()
>>> longside()
>>>

def use_a_swear():
  """Says a swear"""
  print("bitch")

help(use_a_swear)

count = 0 # counting variable
while count < 5:
    print("Hello")
    count = count + 1


import random
 
while True:
    print("This is an infinite loop")
    rand_num = random.randint(1, 101) # random integer between 1 and 100
    if rand_num > 75:
        print("The loop has ended")
        break # stop the loop



import turtle
import random
def draw_rect(f_color, length):
    p_color = (0/255, 153/255, 204/255)
    turtle.pencolor(p_color)
    turtle.fillcolor(f_color)
    turtle.begin_fill()
    for i in range(4):
        turtle.forward(length)
        turtle.right(360/4)
    turtle.end_fill()
def move_toxy(x, y):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
def main():
    turtle.setup(1000, 500)
    turtle.bgcolor("gray")
    turtle.speed(0)
    # for i in range(5):
    #     x_val = random.randint(-400, 400)
    #     y_val = random.randint(-200, 200)
    #     move_toxy(x_val, y_val)
    #     fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255,
random.randint(0, 255) / 255)
    #     draw_rect(fill_color, random.randint(20, 100))
    i = 0
    while i<5:
        x_val = random.randint(-400, 400)
        y_val = random.randint(-200, 200)
        move_toxy(x_val, y_val)
        fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255, 
random.randint(0, 255) / 255)
        draw_rect(fill_color, random.randint(20, 100))
        i = i + 1
    # draw_rect("blue", 100)
    # move_toxy(-100, 150)
    # draw_rect("blue", 50)
    turtle.done()
if __name__ =="__main__":
    main()
    # turtle.circle(100, 180)
    # turtle.done()import turtle
import random
def draw_rect(f_color, length):
    p_color = (0/255, 153/255, 204/255)
    turtle.pencolor(p_color)
    turtle.fillcolor(f_color)
    turtle.begin_fill()
    for i in range(4):
        turtle.forward(length)
        turtle.right(360/4)
    turtle.end_fill()
def move_toxy(x, y):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
def main():
    turtle.setup(1000, 500)
    turtle.bgcolor("gray")
    turtle.speed(0)
    # for i in range(5):
    #     x_val = random.randint(-400, 400)
    #     y_val = random.randint(-200, 200)
    #     move_toxy(x_val, y_val)
    #     fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255,
random.randint(0, 255) / 255)
    #     draw_rect(fill_color, random.randint(20, 100))
    i = 0
    while i<5:
        x_val = random.randint(-400, 400)
        y_val = random.randint(-200, 200)
        move_toxy(x_val, y_val)
        fill_color = (random.randint(0, 255) / 255, random.randint(0, 255) / 255, 
random.randint(0, 255) / 255)
        draw_rect(fill_color, random.randint(20, 100))
        i = i + 1
    # draw_rect("blue", 100)
    # move_toxy(-100, 150)
    # draw_rect("blue", 50)
    turtle.done()
if __name__ =="__main__":
    main()
    # turtle.circle(100, 180)
    # turtle.done()

black doodles.py to format your code?

#Guess the number game
#random integers
idk bro
#arguments go in the parentheses

return function - sets values out of the function for what is set in the function

return_string = welcome(Hope, 10)
if there is no return the return value is none 

def get_num():
    number = int(input("Number: "))
    return number

print(get_number())
variable_ = (get_num())

Parameters 

def add_sub(num1, num2, num3):
    """add_sub does the following:
    Add the first two parameters
    Subtract the third paramter
    Print the result"""
    print(num1 + num2 - num3)

add_sub(10+5, 10, 15)
>:)

def subtract(num1, num2):
    """Subtract the second parameter from the first"""
    print(num1 - num2)
    
subtract(5, 2)
subtract(2, 5)
subtract(num2=2, num1=5)

def parameter_types(param1, param2, param3, param4):
    """Takes four parameters
    Print the type of each element"""
    print("The type of {} is {}".format(param1, type(param1)))
    print("The type of {} is {}".format(param2, type(param2)))
    print("The type of {} is {}".format(param3, type(param3)))
    print("The type of {} is {}".format(param4, type(param4)))
        
parameter_types(1, 5.9, "Beatles", False)

def print_parameter(pram, pram2, pram3):
  """ Prints parameters interpolated"""
  print("My first parameter is ", pram)
  print("My 2nd parameter is {}".format(pram2))
  print(f"My 3rd parameter is {pram3}")

print_parameter("fuck","bitch","cunt")

Try/except - put error codes in your code 

def division(num1, num2):
    try:
        print(num1 / num2)
    except ZeroDivisionError:
        print("Division by zero is not allowed")

def add_if_true(num1, num2, bool = True):
    """Prints the sum of two numbers
    if the variable bool is true"""
    if bool:
        print(num1 + num2)
    else:
        print("No addition, bool is false")

add_if_true(5, 7)
add_if_true(5, 7, False)

def calc_sum(*nums):
    """Calculate the sum of all of the parameters"""
    total = 0
    for num in nums:
        total += num
    print(total)
    
calc_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

list parameters

return values

def add_five(num):
    """Add five to the parameter num"""
    return(num + 5)
  
print(add_five(10))

my_num = 0

global variables: 

my_num = 0

def add_5():
    """Add 5 to my_num"""
    global my_num
    my_num += 5
  
for i in range(10):
    add_5()
    print(my_num)
    
print('The value of my_num is: {}'.format(my_num))

vs 

def add_5(num):
    """Receive a number and return that number plus 5"""
    return(num + 5)
  
for i in range(10):
    print(add_5(i * 5))
    
print(f'The value of my_num is: {my_num}')

the definition of the function is called the function header
return lets an output leave the function 

can you redefine funtions?
you can import your personal library

arguments are typically inputted positionally, but you can also pass them by declaring with the parameter name 
keyword arguments 

to make optional arguments, declare the variable in the function header for a default value 
except can be declared as NameError, ZeroDivisionError 

'tuple values:

in the functionheader: (*var_name)

in the call: (var1, var2, var2)

will function as one variable 

these are useful to unpack lists of variables into separated ones

def get_info(*person):
...     print(f"{person}, {type(person)}")
...
>>> print(__name__)
__main__
>>> if __name__ == "__main__":
...     p1 = get_info("Hope",8)
...     p2 = get_info("Rose", True)
...     print(p1[1])
('Hope', 8), <class 'tuple'>
('Rose', True), <class 'tuple'>
>>>

the global keyword makes a parameter a global variable 

to use an error message, use raise 

    if w <= 0 or h <= 0:
        raise ValueError("Width and height must be positive integers.")

black doodles.py use to auto format your code

list(value0, value1, value2)
print(list[0])

list_1 = ["red"]
list_2 = list_1*3

keyword none

list_1 = [None]*10


lists

length = len(list)
print(f"{list(len-1)}")

list[1] = "new_value1"

play around with lists- how to add to a list, how to print the entire list
make password code 

print(list + list2)
#will print the two lists as one 

print("value0" in list)

slicing

print(names[1:4])
print(names[:4]) # will go from 0 - 4
print(names[1:4:2])
print[::-1] #prints the list in reverse order


everything is an object, object- based coding. 

file_obj = open("myfile.txt", "w")
to open a file and write into it 
file_obj.writelines("The first line\n")
file.obj.close()

write a list of strings into a file

colors = ["red\n", "yellow\n", "blue\n"]

with open("myfile.csv","w") as f_obj:
    f_obj.writelines("Month, Adults, babies, total\n")

'w' overwrites the content of the file, overwiting if the file exists
'a' appends(adds) to existing file content 
'x' is like w, but fails if the file already exists 

f.write method also works, but only for strings
f.writelines works for everything

print(2+5, file = f.obj)

prints to your own file instead of the terminal

file address: 
"directory_name/filename.txt", "w"

if you have your directory open, you can copy files into different locations using
its address

file = var_name 

list_name.append(method)("Method Parameters")

adding/appending things to lists 

s_list = []
s_list.append("item_1")
len(s_list)

the pop function will change the original list
used to take things out of a list


my_list = [1,2,3,4]

for i in range(4):
    print(my_list)
    my_list.pop()


int_list = [1, 2, 3, 4, 5]
string_list = ["John", "Paul", "George", "Ringo"]
mixed_list = [0.87, "hello", True, 17]

my_list = [i for i in range(1, 51)]
#the list is all the numbers 1-50
print(my_list)


my_list = [i for i in range(50, 0, -1)]

print(my_list)


list operators 

list_1 = [1, 2, 3]
list_2 = [4, 5, 6]

print(list_1 + list_2)
print(list_1 + [4])
(Concatenated)

list repitition

list_1 = ["Hi!"]

print(list_1 * 4)

in operator- a bool that checks whether something is in (case sensititve)

my_list = ["red", "orange", "yellow", "green"]
print("red" in my_list)

list lengths

list_1 = [12, 66, 52, 97, 28, 41, 7]
list_2 = [68, True, 34, False, 41.897, "apple"]

if len(list_1) > len(list_2):
    print("list_1 is longer than list_2")
elif len(list_1) == len(list_2):
    print("list_1 and list_2 are the same length")
else:
    print("list_2 is longer than list_1")

slices for lists
my_list = ["red", "orange", "yellow", "green"]
my_slice = my_list[0:2]

print(my_slice)

writing to a file

There are three different
 modes when opening a file: read ("r"), write ("w"), and append ("a"). 

output_file = open("student_folder/text/practice1.txt", "w")
output_file.writelines("Hello there")
output_file.close()

output_file = open("student_folder/text/practice2.txt", "w")
output_file.writelines("Hello ")
output_file.writelines("there\n")
output_file.writelines("bitch")
output_file.close()

lines_to_write = ["First sentence.", "Second sentence.", "Third sentence."]
output_file = open("student_folder/text/practice2.txt", "w")
output_file.writelines(lines_to_write)
output_file.close()

appending text

output_file = open("student_folder/text/practice3.txt", "w")
output_file.writelines("First sentence")
output_file.close()

output_file = open("student_folder/text/practice3.txt", "a")
output_file.writelines("Second sentence")
output_file.close()

with open("student_folder/text/practice3.txt", "a") as output_file:
    output_file.writelines("Some new text!")

the with keyword opens a file and closes it again once the indented code is finished

Writing into files: the hard way:

import os

file_object = open('preferences.txt', 'w')
file_object.write(f"I'm writing stuff. {os.linesep}")
file.object.close()

the easy way: with

import math

with open('numbers.txt', 'w') as file_object:
    user_input = input('Please enter a number ("done" to exit): ')
    while user_input != 'done':
        number = float(user_input)
        print(f'The square root of {number} is {math.sqrt(number)}', file=file_object)
        user_input = input('Please enter another number ("done" to exit): ')


Rabbits outline

uuh function (pretend everything is indendted lol)
with open rabbits.csv
    beginning text
    while rabbits are less than cages
        update rabbit numbers and month
        list rabbit numbers and months
        print rabbit numbers and cages to rabbits.csv
    ^I'll probably put this stuff into a function actually
    end text

(main) get rabbit input/cage input (optional)
do some rabbit math
run again?

the sum function

my_list = [1,2,3]
total = sum(my_list)
print(total)
#this will print the sum of 1 2 3

my_list = ["abc", "def", "ghi"]
print(sum(my_list))
#this will give you an error message. Dont sum strings

the min function (the max function works the same way)

my_list = [45, 12, 9, 1]
smallest = min(my_list)
print(smallest) 

my_list = ["apple", "boy", "cat", "aaron"]
smallest = min(my_list)
print(smallest)
#for strings, the min function returns the 1st in alphabetical order
#but dont mix str and int


append (add to list)
my_list = [1, 2, 3]
new_element = 4

my_list.append(new_element)
print(my_list)

pop (remove from list)
my_list = [1, 2, 3, 4]
print(my_list)
print(my_list.pop())
print(my_list) 
#if specified, will remove the certain index, otherwise just the last one
#returns the removed value

insert
my_list = [1, 2, 3, 4]
my_list.insert(2, "Hi")
print(my_list)
#inserts at a certain index

remove
my_list = [2, "red", 3]
my_list.remove(2)
print(my_list)
#final list is "red", 3- removes the specified value

>>> print(my_list)
['Will', 'Mike', 'Hope', 'Cathy']
>>> my_list.append("Will")
>>> print(my_list)
['Will', 'Mike', 'Hope', 'Cathy', 'Will']
>>> my_list.remove("Will")
>>> print(my_list)
['Mike', 'Hope', 'Cathy', 'Will']
>>> my_list.remove("Will")
>>> print(my_list)
['Mike', 'Hope', 'Cathy']
#if you have 2 of the same value, it will remove the first one



count 
my_var = 2
my_list = [2, "red", 2.0, my_var, "Red", 8 // 4]
print(my_list.count(2))

index
my_list = ["dog", True, 16, "house", 55.9, False, 16]
index = my_list.index("house")
print(index)
#gets the index of a certain value

sort 
my_list = [23, 55, 11, 7, 82.9, -14, 0, 34]
print(my_list)
my_list.sort()
print(my_list)
#sorts the list smallest to biggest or alphabetical
#all capital letters come before lowercase letters
my_list.sort(reverse=True)
print(my_list)
#don't combine str and int

reverse - different from reverse sort
#just reverses the list
my_list = ["north", True, 45, 12, "red"]
print(my_list)
my_list.reverse()
print(my_list)

extend - like append, but for multiple values
#append will add everything as one value
userdb = ["Will","Mike"]
my_list = userdb 
my_list.extend(["Hope", "Cathy"])

sorted
sorted(my_list)
returns what your list would look like sorted
#dont mix int and str
#does not change the original list

